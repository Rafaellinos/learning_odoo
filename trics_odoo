##### models #######
inherit = ['recname']

_rec_name= nome do campo que se referencia essa tabela. Por default é o name
_table = nome da tabela referenciada no banco de dados.
_log_access=False : remove os campos como create_date e write_date

models.Model <- classe.

Abstract models = > sem dados armazenados. serve para ser usado misturando com outros models usando inheritance.


##### commands ########

ODOO important anotation:
./odoo-bin scaffold /yourmodule_name

-i <= reinstall module

####### XML #######

pag 188
<act_window> is for the window action mode, ir.actions.act_window
<menuitem> is for the menu items model, ir.ui.menu
<report> is for the report action model, ir.actions.report.xml
<template> is for QWeb templates stored in the model ir.ui.view

<odoo noupdate="1"> permite que não seja recarregado no update

######## função em xml######
<function
model="todo.task"
name="action_set_lost"
eval="[ref('crm_case_7'), ref('crm_case_9')
, ref('crm_case_11'), ref('crm_case_12')]
, {'install_mode': True}" />  função durante o carregamento.

########## fields ###############
onchange => só funciona no mesmo model e com os records do form
depends => pode ser ativado chamando um model de outro model, não sendo limitado apenas ao atual.

groups='base.group_user', (selection)state={'done':[('readonly',True)]} <= pode ser usando nos campos em .py

perc_complete = fields.Float('% Complete', (x, y)) x=total numbers, y=decimal digits

>>> from odoo import fields
>>> fields.Date.today()
datetime.date(2020, 3, 11)
>>> fields.Datetime.now()
datetime.datetime(2020, 3, 11, 10, 34, 6)
>>> fields.Datetime.from_string('2017-11-21 23:11:55')
datetime.datetime(2017, 11, 21, 23, 11, 55)

to_string(value) -> converte a data or datetime obj em string no formato esperado pelo server.

###### LOGS #############
import logging
_logger = logging.getLogger(__name__)

_logger.debug('A DEBUG message')
_logger.info('An INFO message')
_logger.warning('A WARNING message')
_logger.error('An ERROR message')

####### ODOO SHELL ############
# Toda mudança feita no shell precisa ser comitada para ter efeito

./odoo-bin shell -d learning_odoo -r'odoo13' -w'odoo'

self.env.cr.savepoint()
self.env.cr.execute("SELECT email FROM res_parner WHERE id=1", ([1]))
self.env.cr.commit()
# self.env.cr.rollback() if necessary

>>> self.env['res.partner'].search([('name', 'like', 'Ag')])
res.partner(9, 31)
>>> self.env['res.partner'].browse([9, 31])
res.partner(9, 31)

>>> from odoo import fields
>>> fields.Datetime.now()
'2017-11-21 23:11:55'
>>> fields.Datetime.from_string('2017-11-21 23:11:55')
datetime.datetime(2017, 11, 21, 23, 11, 55)

>>> records = self.env['res.partner'].search([])
>>> len(records)
36
>>> record1 = records.filtered(lambda r: r.name.startswith('A'))
>>> record1
res.partner(14, 35)
>>> record2 = records.filtered('is_company')
>>> record2
res.partner(14, 10, 11, 15, 12, 13, 9, 1)
>>> record2.mapped('name')
['Azure Interior', 'Deco Addict', 'Gemini Furniture', 'Lumber Inc', 'Ready Mat', 'The Jackson Group', 'Wood Corner', 'YourCompany']
>>> record2.mapped(lambda r: (r.id, r.name))
[(14, 'Azure Interior'), (10, 'Deco Addict'), (11, 'Gemini Furniture'), (15, 'Lumber Inc'), (12, 'Ready Mat'), (13, 'The Jackson Group'), (9, 'Wood Corner'), (1, 'YourCompany')]
>>> record2.sorted(key=lambda r: r.id, reverse=True)
res.partner(15, 14, 13, 12, 11, 10, 9, 1)



######## SQL ##############

active == false excluidos das querys

root@f3f78b91b872:/# psql postgres -U odoo

DELETE FROM website_visitor WHERE active = False;

\c <DATA BASENAME>
\dt # list all tables
ALTER TABLE project_task_type DROP CONSTRAINT project_task_type_name_uniq;

#postgres@user:/# psql -l # list dbs without connect with postgres
#postgres@user:/# psql <DATABASE NAME> # connect with datbase

###### Backup manual ######
##### sudo su postgres
##### createuser -s <mesmo nome do seu usuário>
##### 'vole ao seu user'
##### pg_dump -Fc BD_NAME > FILENAME.dump # -Fc format|custom para usar no pg_restore
##### createdb --owner=USUARIO NOMEBD
##### pg_restore --no-owner --role=USUARIO -d NOMEBD file_torestore.dump
##### psql -l
##### 'hora de restaurar o filestore, para ver onde está olhe no odoo.conf em data_dir = /local'
##### 'entre nesse diretorio e copie a pasta filestore de backup dentro de filestore com o mesmo nome do bd criado para backup
##### 'as pastas em filestore são armazenados em numero hexadecimais e os arquivos armazenados em hashs'


###### recordset ##########
Reco
rs1 | rs2  = union set operation
re1 + rs2 = addition set operation
rs1 & rs2 = intersection set operation
rs1 - rs2 = difference set operation

Slice notation:

rs[0] ou rs[-1], primeiro e último
rs[1:] == rs - rs[0]

Operações de adição e remoção de records:

self.task_ids |= task1 # adiciona o record task1 se não estiver presente
self.task_ids -= task1 # remove o record task1 do recordset, se estiver presente
self.task_ids = self.task_ids[:-1] # remove o último record do recordset

### xml-rpc connection #####
### does not support None values!

>>> from xmlrpc import client
>>> srv = 'http://localhost:8069'
>>> common = client.ServerProxy('%s/xmlrpc/2/common' % srv)
>>> common.version()
>>> uid = common.authenticate('learning_odoo', 'admin', 'admin', {})
>>> uid # output 2
>>> api = client.ServerProxy('%s/xmlrpc/2/object' % srv)
>>> api.execute_kw('learning_odoo', 2, 'admin', 'res.partner', 'search_count', [[]]) # output 40
>>> api.execute_kw('learning_odoo',2,'admin','res.partner','search',[[('name','=','Brandon Freeman')]]) # output 26
>>> api.execute_kw('learning_odoo', 2, 'admin', 'res.partner', 'read', [[19]], {'fields': ['id', 'name']}) # output [{'id': 19, 'name': 'Floyd Steward'}]
>>> api.execute_kw(db,uid,pwd,'res.partner','search_read',[[('name','=','Brandon Freeman')]],{'fields': ['id','name']}) # output [{'id': 26, 'name': 'Brandon Freeman'}]
>>> api.execute_kw(db,uid,pwd,'res.partner','search_read',[[('name','=','Brandon Freeman')]]) # all fields
>>> api.execute_kw(db, uid, pwd, 'res.partner','create', [{'name': 'Packt Pub'}])
>>> api.execute_kw(db, uid, pwd, 'res.partner','write', [[46], {'name': 'Packt Publishing'}])
>>> api.execute_kw(db, uid, pwd, 'res.partner','read', [[46], ['id', 'name']])
>>> api.execute_kw(db, uid, pwd, 'res.partner','unlink', [[46]])

    pip3 install --user erppeek  -> lib para abstração
    pode ser usada:
    m = api.model('res.partner')
    m = api.ResPartner
    m.count([('name', 'like', 'Agrolait%')]) # todos metodos
    recs = m.browse([('name', 'like', 'Agrolait')])
    recs.name
    Pag 263

erppeek para server side
erppeek --server='http://localhost:8069' -d todo -u admin
todo >>> model('res.users').count()
3
todo >>> rec = model('res.partner').browse(9)
todo >>> rec.name

manipulate modules:
client.modules()
client.install()
client.upgrade()
client.uninstall()


###### ODOO-bin command line

update all -> -u all

##### RUN BOT ####
http://runbot.odoo.com
https://runbot.odoo-community.org/runbot
